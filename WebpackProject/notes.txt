Module System                   - Common Syntax
CommonJS (NodeJS System)        - require, module.exports 
AMD (requirejs)                 - define, require
ES2015                          - import, export 

Webpack Commands
1. npm install --save-dev webpack@2.2.0-rc.0 - https://webpack.js.org/guides/installation/
2. webpack.config.js - https://webpack.js.org/guides/getting-started/

    const path = require('path'); //path module, part of core nodejs module, can help getting the absolute path

    module.exports = {
    entry: './src/index.js', //Origin of the app js file to compile - uses relative path 
    output: {
        filename: 'bundle.js', //The output of the bundled file 
        path: path.resolve(__dirname, 'dist') //The path of the bundled file  - uses absolute path
    }
    };

3. Create a script inside package.json
    {
    ...
    "scripts": {
        "build": "webpack"
    },
    ...
    }

npm run build  //creates WebpackProject/dist/bundle.cefc3125e90b9d25d9de.js

4. Running the app
//Create HTML 
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Upstar Music</title>
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/css/materialize.min.css"> -->
    <script src="build/bundle.js></script>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

//run 
open html 
--------------------------------------------------------
Babel 
babel-loader - teaches babel how to work with webpack 
babel-core   - knows how to take in code, parse it, and generate some output files
babel-preset-env - Ruleset for telling babel exactly what pieces of es2015/6/7 sysntax to look for, and how to turn it into ES5 code 
css-loader - knows how to deal with css imports 
style-loader - Takes css imports and adds them to the HTML document 
1. npm install --save-dev babel-loader babel-core babel-preset-env css-loader style-loader

2. inside your module configuration //https://webpack.js.org/configuration/

module: { // configuration regarding modules
    rules: [ // rules for modules (configure loaders, parser options, etc.)
      {
        use: 'babel-loader', // tells webpack what loader to run 
        test: /\.js$/, //regex expression - taken by webpack looks to see if the file ends .js, if yes, apply babel 
        exclude: /node_modules/  
      },
      {
        use: ['style-loader', 'css-loader'], // tells webpack what loader to run (from right to left)
        test: /\.css$/
      }
    ]
  }

  3. Run babel-preset-env 
  create .babelrc 
    {
    "presets": ["babel-preset-env", "react"]
    }

4. npm run build 

5. refactor CommonJS 
Replace require with import 
Replace module.exports  with export

